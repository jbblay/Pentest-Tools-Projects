#!/usr/bin/env python 

import hashlib
import tkinter as tk
from tkinter import messagebox
from urllib.request import urlopen

password_list_url = "https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-1000.txt"


def calculate_hash(hash_type, value):
    hash_functions = {
        'MD5': hashlib.md5,
        'SHA-1': hashlib.sha1,
        'SHA-256': hashlib.sha256,
        'SHA-384': hashlib.sha384,
        'SHA-512': hashlib.sha512
    }

    hash_function = hash_functions[hash_type]
    return hash_function(value.encode()).hexdigest()


def detect_hash_type(hash_value):
    hash_lengths = {
        32: 'MD5',
        40: 'SHA-1',
        64: 'SHA-256',
        96: 'SHA-384',
        128: 'SHA-512'
    }

    length = len(hash_value)
    if length in hash_lengths:
        return hash_lengths[length]

    return None


def crack_password(hash_type, hash_value):
    password_list = []
    try:
        with urlopen(password_list_url) as response:
            password_list = response.read().decode("utf-8").split("\n")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to fetch password list: {str(e)}")
        return

    if not hash_type:
        hash_type = detect_hash_type(hash_value)
        if not hash_type:
            messagebox.showwarning("Warning", "Could not detect hash type.")
            return

    hash_function = hashlib.new(hash_type.lower())

    for password in password_list:
        hash_guess = hash_function.copy()
        hash_guess.update(password.encode("utf-8"))
        if hash_guess.hexdigest() == hash_value:
            return password

    return None


def on_crack_button_click():
    hash_type = hash_type_var.get()
    hash_value = hash_value_entry.get().strip()

    if not hash_value:
        messagebox.showwarning("Warning", "Please enter a hash value.")
        return

    cracked_password = crack_password(hash_type, hash_value)
    if cracked_password:
        messagebox.showinfo("Password Cracked", f"The password is: {cracked_password}")
    else:
        messagebox.showinfo("Password Not Found", "Password not found in the password list.")


def on_hash_button_click():
    hash_type = hash_type_var.get()
    value = value_entry.get().strip()

    if not value:
        messagebox.showwarning("Warning", "Please enter a value to hash.")
        return

    hashed_value = calculate_hash(hash_type, value)
    messagebox.showinfo("Hash Result", f"The {hash_type} hash value is: {hashed_value}")
    hashed_value_entry.delete(0, tk.END)
    hashed_value_entry.insert(0, hashed_value)


# Create the main window
window = tk.Tk()
window.title("Hash Cracker")
window.geometry("500x500")

# Create the hash type label and dropdown menu
hash_type_label = tk.Label(window, text="Hash Type:")
hash_type_label.pack()
hash_type_var = tk.StringVar()
hash_functions = ['MD5', 'SHA-1', 'SHA-256', 'SHA-384', 'SHA-512']
hash_type_dropdown = tk.OptionMenu(window, hash_type_var, *hash_functions)
hash_type_dropdown.pack()

# Create the hash value entry and crack button
hash_value_label = tk.Label(window, text="Hash Value:")
hash_value_label.pack()
hash_value_entry = tk.Entry(window,width=50)
hash_value_entry.pack()

crack_button = tk.Button(window, text="Crack Password", command=on_crack_button_click)
crack_button.pack()

# Create the value entry and hash button
value_label = tk.Label(window, text="Plain Text:")
value_label.pack()
value_entry = tk.Entry(window,width=50)
value_entry.pack()

hash_button = tk.Button(window, text="Calculate Hash", command=on_hash_button_click)
hash_button.pack()

# Create the hashed value entry
hashed_value_label = tk.Label(window, text="Hashed Value:")
hashed_value_label.pack()
hashed_value_entry = tk.Entry(window, width=50)
hashed_value_entry.pack()

# Start the main loop
window.mainloop()
