#!/usr/bin/env python

import requests
import hashlib
from termcolor import colored
import threading

hash_types = ['md5', 'sha1', 'sha256', 'sha384', 'sha512']

print("Available hash types:")
for i, hash_type in enumerate(hash_types):
    print(f"{i+1}. {hash_type}")

hash_index = int(input("Enter the index of the hash type to crack: "))
if hash_index < 1 or hash_index > len(hash_types):
    print("Invalid hash index.")
    quit()

chosen_hash_type = hash_types[hash_index - 1]
hash_value = input(f"[*] Enter {chosen_hash_type.upper()} Hash Value to Crack: ")

password_list_url = "https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/10-million-password-list-top-1000.txt"

hash_functions = {
    'md5': hashlib.md5,
    'sha1': hashlib.sha1,
    'sha256': hashlib.sha256,
    'sha384': hashlib.sha384,
    'sha512': hashlib.sha512
}

hash_function = hash_functions[chosen_hash_type]
passwords = []

with requests.get(password_list_url) as response:
    password_list = response.text
    passwords = password_list.split("\n")

# Number of threads to use
num_threads = 8
results = []
found_password = None
found_password_lock = threading.Lock()

def crack_password(thread_index, start, end):
    global found_password

    for i in range(start, end):
        password = passwords[i]
        hash_guess = hash_function(password.encode("utf-8")).hexdigest()

        if hash_guess == hash_value:
            with found_password_lock:
                found_password = password
            return

def start_threads():
    global found_password

    chunk_size = len(passwords) // num_threads
    threads = []

    for i in range(num_threads):
        start = i * chunk_size
        end = (i + 1) * chunk_size if i < num_threads - 1 else len(passwords)
        thread = threading.Thread(target=crack_password, args=(i, start, end))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    if found_password:
        print(colored(f"[+] The password is: {found_password}", "green"))
    else:
        print("Password not found in the password list.")

# Print the chosen hash value
print(f"Cracking {chosen_hash_type.upper()} hash: {hash_value}\n")

start_threads()
