#!/usr/bin/env python
            
import socket
import threading

target_host = "192.168.30.137"
target_ports = [21, 22, 23, 25, 53, 67, 68, 80, 111, 112, 139, 445, 513, 514, 1099, 6000, 6667, 8009, 8180, 1524, 2049, 2121, 3306, 5432, 5900, 443, 3306, 3389]

# Dictionary to map port numbers to protocol names
port_protocol_map = {
    21: "FTP",
    22: "SSH",
    23: "Telnet",
    25: "SMTP",
    53: "DNS",
    67: "DHCP",
    68: "DHCP",
    80: "HTTP",
    111: "RPC",
    112: "RPC",
    139: "NetBIOS",
    445: "SMB",
    513: "Rlogin",
    514: "Syslog",
    1099: "Java RMI",
    6000: "X11",
    6667: "IRC",
    8009: "Apache Tomcat",
    8180: "Apache Tomcat",
    1524: "WINS",
    2049: "NFS",
    2121: "FTP",
    3306: "MySQL",
    5432: "PostgreSQL",
    5900: "VNC",
    443: "HTTPS",
    3389: "RDP"
}

def scan_port(port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        result = sock.connect_ex((target_host, port))
        if result == 0:
            protocol = port_protocol_map.get(port, "Unknown")
            print(f"Port {port} ({protocol}) is open")
            if protocol == "HTTP":
                # Send an HTTP request and analyze the response
                sock.sendall(b"GET / HTTP/1.1\r\nHost: " + target_host.encode() + b"\r\n\r\n")
                response = sock.recv(1024).decode()
                server_header = response.split("Server: ")[1].split("\r\n")[0]
                print(f"Server version: {server_header}")
            elif protocol == "SSH":
                # Send an SSH identification message and analyze the response
                sock.sendall(b"SSH-2.0-OpenSSH_7.9p1 Debian-10+deb10u2\r\n")
                response = sock.recv(1024).decode()
                version_header = response.split(" ")[1].strip()
                print(f"Server version: {version_header}")
            elif protocol == "SMTP":
                # Send a SMTP HELO command and analyze the response
                sock.sendall(b"HELO example.com\r\n")
                response = sock.recv(1024).decode()
                version_header = response.split(" ")[1].strip()
                print(f"Server version: {version_header}")
            elif protocol == "DNS":
                # Send a DNS version query and analyze the response
                sock.sendall(b"\x00\x00\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x03example\x03com\x00\x00\x01\x00\x01")
                response = sock.recv(1024).decode()
                version_header = response.split(" ")[1].strip()
                print(f"Server version: {version_header}")
            elif protocol == "RDP":
                # Connect to RDP server and get the server version
                from rdp import RDPClient
                with RDPClient(target_host, port=port) as client:
                    client.connect()
                    server_version = client.server_info['version']
                    print(f"Server version: {server_version}")
            elif protocol == "Rlogin":
                port = 513
                # Connect to Rlogin server and get the server version
                import telnetlib3.client
                async def rlogin_version():
                    async with telnetlib3.client.connect(target_host, port=port) as rlogin:
                        await rlogin.send_line("\xff\xfd\x18\xff\xfd\x20\xff\xfd\x23\xff\xfb\x01\xff\xfb\x03\xff\xfc\x22")
                        response = await rlogin.read_until(b"\r\n")
                        version_header = response.decode().split(" ")[1].strip()
                        print(f"Server version: {version_header}")
                asyncio.run(rlogin_version())
            elif port == 514:
                # Connect to Syslog server and get the server version
                # The Syslog message to send to the server
                syslog_message = "<14>1 2023-05-16T15:30:00.000Z my-hostname my-app - - - Test Syslog message\n"
                # Create a UDP socket and send the Syslog message to the server
                sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                sock.sendto(syslog_message.encode(), (target_host, port))
                sock.settimeout(2)
                # Receive the server's response and extract the server version
                response, _ = sock.recvfrom(1024)
                version_header = response.decode().split(":")[1].strip()
                print(f"Server version: {version_header}")
            elif port == 2049:
                # Connect to the NFS server and get the server version
                import subprocess
                # Run the nfsstat command and capture its output
                sock.send(subprocess.check_output(["nfsstat", "-m"], universal_newlines=True), target_host)
                response = sock.recv(1024).decode()
                if response:
                    version_header = response.split(" ")[1].strip()
                    print(f"Server version: {version_header}")
                else:
                    print("Unable to determine server version")





    except:
        pass

for port in range(6550):
    scan_port(port)