#!/usr/bin/env python
import socket
import os,sys
import struct
import binascii

sock_created = False
sniffer_socket = 0

def analyze_udp_header(data_recv):
    udp_header = struct.unpack('!4H', data_recv[:8])
    src_port = udp_header[0]
    dst_port = udp_header[1]
    length = udp_header[2]
    checksum = udp_header[3]
    data = data_recv[8:]

    print("__________________________UDP HEADER________________________________________________")
    print(f"Source Port: {src_port}")
    print(f"Destination Port: {dst_port}")
    print(f"Length: {length}")
    print(f"Checksum: {checksum}")
    return data


def analyze_tcp_header(data_recv):
    tcp_header = struct.unpack('!2H2I4H', data_recv[:20])
    src_port = tcp_header[0]
    dst_port = tcp_header[1]
    seq_num = tcp_header[2]
    ack_num = tcp_header[3]
    data_offset = tcp_header[4] >> 12
    reserved = (tcp_header[4] >> 6) & 0x03FF
    flags = tcp_header[4] & 0x003F
    window = tcp_header[5]
    checksum = tcp_header[6]
    urg_ptr = tcp_header[7]
    data = data_recv[20:]

    urg = bool(flags & 0x0020)
    ack = bool(flags & 0x0010)
    psh = bool(flags & 0x0008)
    rst = bool(flags & 0x0004)
    syn = bool(flags & 0x0002)
    fin = bool(flags & 0x0001)

    print("__________________________TCP HEADER________________________________________________")
    print(f"Source Port: {src_port}")
    print(f"Destination Port: {dst_port}")
    print(f"Sequence Number: {seq_num}")
    print(f"Acknowledgment Number: {ack_num}")
    print(f"Data Offset: {data_offset}")
    print(f"Reserved: {reserved}")
    print(f"Flags: {flags}")
    print(f"Window Size: {window}")
    print(f"Checksum: {checksum}")
    print(f"Urgent Pointer: {urg_ptr}")
    print(f"URG: {urg}")
    print(f"ACK: {ack}")
    print(f"PSH: {psh}")
    print(f"RST: {rst}")
    print(f"SYN: {syn}")
    print(f"FIN: {fin}")

    return data


def analyze_ip_header(data_recv):
	ip_header = struct.unpack('!6H4s4s', data_recv[:20])
	version = ip_header[0] >> 12
	ihl = (ip_header[0] >> 8) & 0x0f
	tos = ip_header[0] & 0x00ff
	tot_len = ip_header[1]
	ip_id = ip_header[2]
	flags = ip_header[3]
	flags_offset = ip_header[3] & 0x1fff
	ip_ttl = ip_header[4] >> 8
	ip_protocol = ip_header[4] & 0x00ff
	checksum = ip_header[5]
	src_address = socket.inet_ntoa(ip_header[6])
	dest_address = socket.inet_ntoa(ip_header[7])
	data = data_recv[20:]

	print("__________________________IP HEADER________________________________________________")
	print(f"Version: {version}")
	print(f"IHL : {ihl}")
	print(f"TOS: {tos}")
	print(f"LENGTH: {tot_len}")
	print(f"ID: {ip_id}")
	print(f"OFFSET: {flags_offset}")
	print(f"TTL: {ip_ttl}")
	print(f"PROTOCOL: {ip_protocol}")
	print(f"Checksum: {checksum}")
	print(f"Source IP: {src_address}")
	print(f"Destination IP :{dest_address}")

	if ip_protocol == 6:
		tcp_udp = "TCP"
	elif ip_protocol == 17:
		tcp_udp = "UDP"
	else:
		tcp_udp = "OTHER"
	return data, tcp_udp


def analyze_ether_header(data_recv):
	ip_bool = False
	ether_header = struct.unpack('!6s6sH', data_recv[:14])
	dest_mac = binascii.hexlify(ether_header[0])
	src_mac = binascii.hexlify(ether_header[1])
	protocol = ether_header[2] >> 8
	data = data_recv[14:]

	print("__________________________ETHERNET HEADER______________________________________")
	print(f"Destination MAC: {dest_mac[0:2],dest_mac[2:4],dest_mac[4:6],dest_mac[6:8],dest_mac[8:10],dest_mac[10:12]}")
	print(f"Source Mac: {src_mac[0:2],src_mac[2:4],src_mac[4:6],src_mac[6:8],src_mac[8:10],src_mac[10:12]}")
	print("PROTOCOL: {protocol}")

	if protocol == 0x008:
		ip_bool = True
	return data, ip_bool


def main():
	global sock_created
	global sniffer_socket
	if sock_created == False:
		sniffer_socket = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0003))
		sock_created = True

	data_recv = sniffer_socket.recv(2048)
	os.system('clear')
	data_recv, ip_bool = analyze_ether_header(data_recv)
	if ip_bool:
		data_recv, tcp_udp = analyze_ip_header(data_recv)
	else:
		return

	if tcp_udp == "TCP":
		data_recv = analyze_tcp_header(data_recv)
	elif tcp_udp =="UDP":
		data_recv = analyze_udp_header(data_recv)
	else:
		return


while True:
    main()
    